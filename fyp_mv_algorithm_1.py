# -*- coding: utf-8 -*-
"""FYP MV algorithm 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_VoBvezXrkv73dHWv1BDjItyWrdX8ek6
"""

from PIL import Image
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

C = 25000
df = pd.read_excel("Image crack1 diff freq.xlsx", index_col=0)
df = np.array(df)
df = df*C

image = Image.fromarray(df)
#image.save("sample1.jpg")

plt.figure(C, (10,100))  
plt.title(C)
plt.imshow(image, cmap = "gray")
plt.show()

from PIL import Image
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

C = -300
df = pd.read_excel("Image crack1 diff freq.xlsx", index_col=0)
df = np.array(df)
df = df*C
df = df[:,500:800]

image = Image.fromarray(df)

if image.mode != 'RGB':
    image = image.convert('RGB')

image.save("sample1.jpg")

plt.figure(C, (10,100))  
plt.title(C)
plt.imshow(image, cmap = "gray")
plt.show()

import cv2

image = cv2.imread("sample1.jpg", cv2.IMREAD_GRAYSCALE)
#image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

image = cv2.GaussianBlur(image, (5,5), 4, 4)
kernel = np.array([[-1, -1, -1], [-1, 9, -1], [-1, -1, -1]])
image = cv2.filter2D(image, -1, kernel = kernel)

ddepth = cv2.CV_16S
grad_x = cv2.Sobel(image, ddepth, 1, 0, 3)
grad_y = cv2.Sobel(image, ddepth, 0, 1, 3)

abs_grad_x = cv2.convertScaleAbs(grad_x)
abs_grad_y = cv2.convertScaleAbs(grad_y)

grad = cv2.addWeighted(grad_x, 0.5, grad_y, 0.5, 0)

plt.imshow(grad, cmap = "gray")

alpha = 0.1
beta = 100

image2 = cv2.convertScaleAbs(image, alpha = alpha, beta = beta)
plt.imshow(image2, cmap = "gray")

PIL_image = Image.open('sample1.jpg')

image3 = cv2.resize(image2, None, fx = 5, fy = 10, interpolation = cv2.INTER_CUBIC) #different interpolation methods exist

from PIL import ImageFilter
image4 = PIL_image.filter(ImageFilter.SHARPEN)
image4 = image4.filter(ImageFilter.EDGE_ENHANCE)
image4 = image4.filter(ImageFilter.FIND_EDGES)

plt.figure(figsize = (50,100))
plt.imshow(image4, cmap = 'gray',interpolation = 'nearest')
plt.show()

"""interpolation; supported values are 'antialiased', 'none', 'nearest', 'bilinear', 'bicubic', 'spline16', 'spline36', 'hanning', 'hamming', 'hermite', 'kaiser', 'quadric', 'catrom', 'gaussian', 'bessel', 'mitchell', 'sinc', 'lanczos', 'blackman'"""

import matplotlib.pyplot as plt
import numpy as np
from PIL import Image
from PIL import ImageOps
from PIL import ImageFilter

image = Image.open("sample1.jpg")
image = ImageOps.grayscale(image)
rows, columns = image.size

image2 = np.zeros((rows,columns))

#Sharpening
#image2 = image.filter(ImageFilter.SHARPEN)

#Edge Enhancement
image2 = image.filter(ImageFilter.EDGE_ENHANCE)

#Edge Detection
image2 = image2.filter(ImageFilter.FIND_EDGES)

image2 = np.array(image2)

plt.title("Edges")
plt.imshow(image2, cmap = "gray")

plt.figure(figsize = (50,100))
plt.show()

image = cv2.imread("sample1.jpg")
image =  cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

plt.imshow(image, cmap = 'gray')

image = cv2.resize(image, None, fx = 5, fy = 10, interpolation = cv2.INTER_CUBIC)

#image = cv2.GaussianBlur(image, (5,5), 4, 4)
kernel = np.array([[0, -1, 0], [-1,5, -1], [0, -1, 0]])
image = cv2.filter2D(image, -1, kernel = kernel)

ddepth = cv2.CV_64F
grad_x = cv2.Sobel(image, ddepth, 1, 0, 10)
grad_y = cv2.Sobel(image, ddepth, 0, 1, 10)

abs_grad_x = cv2.convertScaleAbs(grad_x)
abs_grad_y = cv2.convertScaleAbs(grad_y)

grad = cv2.addWeighted(grad_x, 0.2, grad_y, 0.8, 0)

plt.figure(figsize = (50,100))
plt.imshow(grad, cmap = 'gray', interpolation = 'nearest')

"""Feature Extraction"""

#img = cv2.imread('sample1.jpg')
#gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
#gray = np.float32(gray)

#dst = cv2.cornerHarris(gray, 8, 3 , 0.04)

# Applying dilation to increase the object area and to emphasize features
#dst = cv2.dilate(dst, None)

# Threshold for an optimal value. It may vary depending on the image.
#img[dst>0.05*dst.max()]=[255, 0, 255]

#plt.imshow(img)

img_1 = cv2.imread('sample1.jpg')
gray = cv2.cvtColor(img_1,cv2.COLOR_BGR2GRAY)

corners = cv2.goodFeaturesToTrack(gray, 100, 0.01, 1)
                              
corners = np.int0(corners)

for i in corners:
    x, y = i.ravel()
    cv2.circle(img_1, (x,y), 3, (255, 0, 255), -1)

plt.imshow(img_1)

#img_1 = cv2.imread('sample1.jpg')
#gray = cv2.cvtColor(img_1,cv2.COLOR_BGR2GRAY)

#corners = cv2.goodFeaturesToTrack(gray, 100, 0.01, 1)
                              
#corners = np.int0(corners)

#X = []
#Y = []

#for i in corners:
 #   x, y = i.ravel()
 #   cv2.circle(img_1, (x,y), 3, (255, 0, 255), -1)
 #   X.append(x)
 #   Y.append(y)

#plt.imshow(img_1)

#!pip install opencv-python==3.4.2.17
#!pip install opencv-contrib-python==3.4.2.17

#img = cv2.imread('sample1.jpg')

#img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

#sift = cv2.xfeatures2d.SIFT_create()

#keypoints = sift.detect(img_gray, None)
#plt.imshow(cv2.drawKeypoints(img, keypoints, None, (255, 0, 255)))

#img = cv2.imread('sample1.jpg')

#img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

#sift = cv2.xfeatures2d.SIFT_create()

#keypoints = sift.detect(img_gray, None)
#plt.imshow(cv2.drawKeypoints(img, keypoints, None, (255, 0, 255), flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS))

#img = cv2.imread('sample1.jpg')
#img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

#surf = cv2.xfeatures2d.SURF_create()

#keypoints = surf.detect(img_gray, None)
#plt.imshow(cv2.drawKeypoints(img, keypoints, None, (255, 0, 255)))

#orb = cv2.ORB_create(nfeatures=2500)
#keypoints_orb, descriptors = orb.detectAndCompute(img, None)
#plt.imshow(cv2.drawKeypoints(img, keypoints_orb, None, (255, 0, 255)))

"""For our application, best is goodfeaturetotrack algorithm"""

img_1 = cv2.imread('sample1.jpg')
gray = cv2.cvtColor(img_1,cv2.COLOR_BGR2GRAY)

corners = cv2.goodFeaturesToTrack(gray, 100, 0.01, 1)
                              
corners = np.int0(corners)

X= []
Y= []


for i in corners:
    x, y = i.ravel()
    cv2.circle(img_1, (x,y), 2, (255, 0, 0), -1)
    X.append(x)
    Y.append(y)

plt.imshow(img_1)
cv2.imwrite("sample2.jpg", img_1)

corners

X

Y

img = cv2.imread("sample2.jpg")
#img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.imshow(img)